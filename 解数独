编写一个程序，通过已填充的空格来解决数独问题。

一个数独的解法需遵循如下规则：
数字 1-9 在每一行只能出现一次。
数字 1-9 在每一列只能出现一次。
数字 1-9 在每一个以粗实线分隔的 3x3 宫内只能出现一次。
空白格用 '.' 表示。

Note:
给定的数独序列只包含数字 1-9 和字符 '.' 。
你可以假设给定的数独只有唯一解。
给定数独永远是 9x9 形式的。


class Solution {
    public void solveSudoku(char[][] board) {
        boolean[][] row = new boolean[9][9];
        boolean[][] col = new boolean[9][9];
        boolean[][] block = new boolean[9][9];
        for(int i=0;i<9;i++){
            for(int j=0;j<9;j++){
                if(board[i][j] != '.'){
                    int num = board[i][j] - '1';
                    row[i][num] = true;
                    col[j][num] = true;
                    block[i/3*3+j/3][num] = true;
                }
            }
        }
        dfs(row,col,block,board,0,0);
    }

    public boolean dfs(boolean[][] row,boolean[][] col,boolean[][] block,char[][] board,int i,int j) {
        while(board[i][j]!='.'){
            if(++j >8){
                i++;
                j=0;
            }
            if(i==9){
                  return true;  
            }
        }

        for(int num=0;num<9;num++){
            int blockindex = i/3*3+j/3;
            if(!row[i][num] && !col[j][num] && !block[blockindex][num]){
                board[i][j]=(char)('1'+num);
                row[i][num]=true;
                col[j][num]=true;
                block[blockindex][num]=true;
                if(dfs(row,col,block,board,i,j)){
                    return true;
                }else{
                    board[i][j]='.';
                    row[i][num]=false;
                    col[j][num]=false;
                    block[blockindex][num]=false;
                }
            }       
        }

        return false;

    }

    private void printBoard(char[][] board) {
        for (int i = 0; i < 9; i++) {
            for (int j = 0; j < 9; j++) {
                System.out.print(board[i][j] + " ");
            }
            System.out.println();
        }
    }

    public static void main(String[] args) {
        char[][] board = new char[][]{
                {'5', '3', '.', '.', '7', '.', '.', '.', '.'},
                {'6', '.', '.', '1', '9', '5', '.', '.', '.'},
                {'.', '9', '8', '.', '.', '.', '.', '6', '.'},
                {'8', '.', '.', '.', '6', '.', '.', '.', '3'},
                {'4', '.', '.', '8', '.', '3', '.', '.', '1'},
                {'7', '.', '.', '.', '2', '.', '.', '.', '6'},
                {'.', '6', '.', '.', '.', '.', '2', '8', '.'},
                {'.', '.', '.', '4', '1', '9', '.', '.', '5'},
                {'.', '.', '.', '.', '8', '.', '.', '7', '9'}
        };

        Solution solution = new Solution();
        solution.solveSudoku(board);
        solution.printBoard(board);
    }
}
